import streamlit as st
import streamlit_shadcn_ui as ui
import os
import shutil
import datetime
import pandas as pd   
import time 

from sqlalchemy import text
from db import get_connection_app

def admin_page4():
    action = ["Req get point", "Req use point", "History get point","History use point"]

    st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    selected_action = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)

    if selected_action == "Req get point":
        st.title("üì• Request Get Point")
        st.write("------")

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        # request_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á", ("‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏ó‡∏µ‡∏°"))
        request_type = ui.tabs(options=['‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏µ‡∏°'], default_value='‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', key="kanaries")

        conn = get_connection_app()

        if request_type == "‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•":
            query = text("""
                SELECT 
                    f.id,
                    f.user_ref_id,
                    u.full_name,
                    u.nickname,
                    f.message,
                    f.original_name,
                    f.new_name,
                    f.file_type,
                    f.path,
                    f.upload_time,
                    k.kpi_name,
                    k.point_value
                FROM kpigoalpoint.file_messages_personal f
                JOIN kpigoalpoint.users u ON f.user_ref_id = u.user_id
                LEFT JOIN kpigoalpoint.kpi_personal k ON f.kpi_id = k.id
                WHERE f.status = 'onprocess'
                ORDER BY f.upload_time ASC
            """)

            result = conn.execute(query)
            rows = result.fetchall()

            if not rows:
                st.info("‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
            else:
                for row in rows:
                    col1, col2 = st.columns([0.5, 15])
                    with col1:
                        st.checkbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", key=f"select_{row.id}", label_visibility="collapsed")
                    with col2:
                        with st.expander(f"üì® ‡∏à‡∏≤‡∏Å {row.full_name} ({row.nickname}) ‡πÄ‡∏ß‡∏•‡∏≤ {row.upload_time.strftime('%Y-%m-%d %H:%M')}"):
                            st.markdown(f"**‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á:**\n\n{row.message}")
                            if row.kpi_name:
                                st.markdown(f"üìå **KPI ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** {row.kpi_name}")
                                st.markdown(f"üéØ **Point:** {row.point_value}")
                            else:
                                st.markdown("üìå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI")

                            # ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
                            if row.original_name and row.new_name and row.path:
                                try:
                                    with open(f"{row.path}/{row.new_name}", "rb") as f:
                                        st.download_button(
                                            label=f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: {row.original_name}",
                                            data=f.read(),
                                            file_name=row.original_name,
                                            mime=row.file_type
                                        )
                                except:
                                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
                            else:
                                st.markdown("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö")

                selected_rows = [row for row in rows if st.session_state.get(f"select_{row.id}", False)]

                colA, colB = st.columns([0.1, 0.8])
                with colA:
                    submit_personal = ui.button("Submit", key="submit_personal", variant="default")
                with colB:
                    reject_personal = ui.button("Reject", key="reject_personal", variant="destructive")

                # --- ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ---
                if submit_personal:
                    if not selected_rows:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á")
                    else:
                        any_success = False
                        for row in selected_rows:
                            try:
                                if not row.user_ref_id or row.point_value is None:
                                    st.warning(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ç‡∏≠‡∏á {row.full_name}")
                                    continue

                                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                                result = conn.execute(text("""
                                    UPDATE kpigoalpoint.personal_points
                                    SET point_value = point_value + :add_point
                                    WHERE user_ref_id = :user_id
                                """), {"add_point": row.point_value, "user_id": row.user_ref_id})

                                if result.rowcount == 0:
                                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á {row.full_name}")
                                    continue

                                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                                now = datetime.datetime.now()
                                year = str(now.year)
                                month = str(now.month).zfill(2)
                                save_dir = os.path.join("uploads", "personal", "done", year, month)
                                os.makedirs(save_dir, exist_ok=True)

                                if row.path and row.new_name:
                                    old_path = os.path.join(row.path, row.new_name)
                                    if os.path.exists(old_path):
                                        file_ext = os.path.splitext(row.original_name)[-1]
                                        base, _ = os.path.splitext(row.new_name)
                                        new_name = base + file_ext
                                        new_path = os.path.join(save_dir, new_name)

                                        # ‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô
                                        counter = 1
                                        while os.path.exists(new_path):
                                            new_name = f"{base}_{counter}{file_ext}"
                                            new_path = os.path.join(save_dir, new_name)
                                            counter += 1

                                        shutil.move(old_path, new_path)

                                        conn.execute(text("""
                                            UPDATE kpigoalpoint.file_messages_personal
                                            SET status = 'done', new_name = :new_name, path = :path, updated_at = now()
                                            WHERE id = :id
                                        """), {"new_name": new_name, "path": save_dir, "id": row.id})
                                    else:
                                        conn.execute(text("""
                                            UPDATE kpigoalpoint.file_messages_personal
                                            SET status = 'done', updated_at = now()
                                            WHERE id = :id
                                        """), {"id": row.id})
                                else:
                                    conn.execute(text("""
                                        UPDATE kpigoalpoint.file_messages_personal
                                        SET status = 'done', updated_at = now()
                                        WHERE id = :id
                                    """), {"id": row.id})

                                any_success = True
                            except Exception as e:
                                st.error(f"‚ùå {row.full_name}: {e}")

                        if any_success:
                            conn.commit()
                            st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                            time.sleep(1)
                            st.rerun()

                # --- ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (reject) ---
                if reject_personal:
                    if not selected_rows:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á")
                    else:
                        any_success = False
                        for row in selected_rows:
                            try:
                                conn.execute(text("""
                                    UPDATE kpigoalpoint.file_messages_personal
                                    SET status = 'reject', updated_at = now()
                                    WHERE id = :id
                                """), {"id": row.id})
                                any_success = True
                            except Exception as e:
                                st.error(f"‚ùå {row.full_name}: {e}")

                        if any_success:
                            conn.commit()
                            st.success("üõë ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•) ‡πÅ‡∏•‡πâ‡∏ß")
                            time.sleep(1)
                            st.rerun()

        # ---------------------------------------------

        elif request_type == "‡∏ó‡∏µ‡∏°":
            query = text("""
                SELECT 
                    f.id,
                    f.dept_ref_id,
                    d.dept_name,
                    f.message,
                    f.original_name,
                    f.new_name,
                    f.file_type,
                    f.path,
                    f.upload_time,
                    k.kpi_name,
                    k.point_value
                FROM kpigoalpoint.file_messages_team f
                JOIN kpigoalpoint.departments d ON f.dept_ref_id = d.id
                LEFT JOIN kpigoalpoint.kpi_team k ON f.kpi_id = k.id
                WHERE f.status = 'onprocess'
                ORDER BY f.upload_time ASC
            """)
            result = conn.execute(query)
            rows = result.fetchall()

            if not rows:
                st.info("‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°")
            else:
                for row in rows:
                    col1, col2 = st.columns([0.5, 15])
                    with col1:
                        st.checkbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", key=f"select_team_{row.id}", label_visibility="collapsed")
                    with col2:
                        with st.expander(f"üì® ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å {row.dept_name} ‡πÄ‡∏ß‡∏•‡∏≤ {row.upload_time.strftime('%Y-%m-%d %H:%M')}"):
                            st.markdown(f"**‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á:**\n\n{row.message}")
                            if row.kpi_name:
                                st.markdown(f"üìå **KPI ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:** {row.kpi_name}")
                                st.markdown(f"üéØ **Point:** {row.point_value}")
                            else:
                                st.markdown("üìå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI")

                            if row.original_name and row.new_name and row.path:
                                try:
                                    with open(f"{row.path}/{row.new_name}", "rb") as f:
                                        st.download_button(
                                            label=f"‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: {row.original_name}",
                                            data=f.read(),
                                            file_name=row.original_name,
                                            mime=row.file_type
                                        )
                                except:
                                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
                            else:
                                st.markdown("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö")

                selected_rows = [row for row in rows if st.session_state.get(f"select_team_{row.id}", False)]

                colA, colB = st.columns([0.1, 0.8])
                with colA:
                    submit_team = ui.button("Submit", key="submit_team", variant="default")
                with colB:
                    reject_team = ui.button("Reject", key="reject_team", variant="destructive")

                # --- ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ---
                if submit_team:
                    if not selected_rows:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á")
                    else:
                        any_success = False
                        for row in selected_rows:
                            try:
                                if row.point_value is None or not row.dept_ref_id:
                                    st.warning(f"‚ùó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ç‡∏≠‡∏á {row.dept_name}")
                                    continue

                                result = conn.execute(text("""
                                    UPDATE kpigoalpoint.departments
                                    SET point_dpmt = point_dpmt + :add_point
                                    WHERE id = :dept_ref_id
                                """), {"add_point": row.point_value, "dept_ref_id": row.dept_ref_id})

                                if result.rowcount == 0:
                                    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å {row.dept_name}")
                                    continue

                                now = datetime.datetime.now()
                                year = str(now.year)
                                month = str(now.month).zfill(2)
                                save_dir = os.path.join("uploads", "team", "done", year, month)
                                os.makedirs(save_dir, exist_ok=True)

                                if row.path and row.new_name:
                                    old_path = os.path.join(row.path, row.new_name)
                                    if os.path.exists(old_path):
                                        file_ext = os.path.splitext(row.original_name)[-1]
                                        base, _ = os.path.splitext(row.new_name)
                                        new_name = base + file_ext
                                        new_path = os.path.join(save_dir, new_name)

                                        # ‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏ô
                                        counter = 1
                                        while os.path.exists(new_path):
                                            new_name = f"{base}_{counter}{file_ext}"
                                            new_path = os.path.join(save_dir, new_name)
                                            counter += 1

                                        shutil.move(old_path, new_path)

                                        conn.execute(text("""
                                            UPDATE kpigoalpoint.file_messages_team
                                            SET status = 'done', new_name = :new_name, path = :path, updated_at = now()
                                            WHERE id = :id
                                        """), {"new_name": new_name, "path": save_dir, "id": row.id})
                                    else:
                                        conn.execute(text("""
                                            UPDATE kpigoalpoint.file_messages_team
                                            SET status = 'done', updated_at = now()
                                            WHERE id = :id
                                        """), {"id": row.id})
                                else:
                                    conn.execute(text("""
                                        UPDATE kpigoalpoint.file_messages_team
                                        SET status = 'done', updated_at = now()
                                        WHERE id = :id
                                    """), {"id": row.id})

                                any_success = True
                            except Exception as e:
                                st.error(f"‚ùå {row.dept_name}: {e}")

                        if any_success:
                            conn.commit()
                            st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏ó‡∏µ‡∏°)")
                            time.sleep(1)
                            st.rerun()

                # --- ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (reject) ---
                if reject_team:
                    if not selected_rows:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á")
                    else:
                        any_success = False
                        for row in selected_rows:
                            try:
                                conn.execute(text("""
                                    UPDATE kpigoalpoint.file_messages_team
                                    SET status = 'reject', updated_at = now()
                                    WHERE id = :id
                                """), {"id": row.id})
                                any_success = True
                            except Exception as e:
                                st.error(f"‚ùå {row.dept_name}: {e}")

                        if any_success:
                            conn.commit()
                            st.success("üõë ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ó‡∏µ‡∏°) ‡πÅ‡∏•‡πâ‡∏ß")
                            time.sleep(1)
                            st.rerun()
                        
                        
    elif selected_action == "Req use point":
        st.title("üì• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point")
        st.write("------")

        # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
        # request_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á", ("‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏ó‡∏µ‡∏°"))
        request_type = ui.tabs(options=['‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏µ‡∏°'], default_value='‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', key="kanaries")
        requester_type = "user" if request_type == "‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•" else "team"

        try:
            conn = get_connection_app()

            result = conn.execute(text(f"""
                SELECT 
                    r.id,
                    r.requester_ref_id,
                    r.status,
                    r.upload_time,
                    u.full_name,
                    u.nickname,
                    rw.reward_name,
                    rw.reward_point
                FROM kpigoalpoint.req_user_team r
                LEFT JOIN kpigoalpoint.reward rw ON r.reward_id = rw.id
                LEFT JOIN kpigoalpoint.users u ON r.requester_ref_id = u.user_id
                WHERE r.requester_type = :req_type AND r.status = 'pending'
                ORDER BY r.upload_time ASC
            """), {"req_type": requester_type})
            rows = result.fetchall()

            if not rows:
                st.info(f"‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point{'‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•' if requester_type == 'user' else '‡∏ó‡∏µ‡∏°'}")
            else:
                for row in rows:
                    col1, col2 = st.columns([0.5, 15])

                    with col1:
                        st.checkbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", key=f"approve_req_{row.id}", label_visibility="collapsed")

                    with col2:
                        name_display = (
                            f"{row.full_name} ({row.nickname})"
                            if requester_type == "user"
                            else f"‡πÅ‡∏ú‡∏ô‡∏Å ID: {row.requester_ref_id}"
                        )
                        with st.expander(f"üì® ‡∏à‡∏≤‡∏Å {name_display} ‡πÄ‡∏ß‡∏•‡∏≤ {row.upload_time.strftime('%Y-%m-%d %H:%M')}"):
                            st.markdown(f"üéÅ **‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•:** {row.reward_name or '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}")
                            st.markdown(f"üéØ **‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:** {row.reward_point or '-'}")
                            st.markdown(f"üìå **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** {row.status}")

                selected_rows = [row for row in rows if st.session_state.get(f"approve_req_{row.id}", False)]

                submit = ui.button("Submit", key="add_point", variant="default")

                if submit:
                    if not selected_rows:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    else:
                        try:
                            for row in selected_rows:
                                conn.execute(text("""
                                    UPDATE kpigoalpoint.req_user_team
                                    SET status = 'approved',
                                        update_time = now()
                                    WHERE id = :id
                                """), {"id": row.id})

                            conn.commit()
                            st.success("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            time.sleep(2)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡πà‡∏≠‡∏ô rerun
                            st.rerun()
                        except Exception as e:
                            conn.rollback()
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ: {e}")
        finally:
            if 'conn' in locals():
                conn.close()
    
    
    elif selected_action == "History get point":
        st.title("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á")
        st.write('------')

        conn = get_connection_app()

        # === ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ===
        query_personal = """
            SELECT 
                d.dept_name,
                u.full_name AS owner,
                f.message,
                f.upload_time,
                f.new_name,
                '‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' AS type
            FROM kpigoalpoint.file_messages_personal f
            JOIN kpigoalpoint.users u ON f.user_ref_id = u.user_id
            JOIN kpigoalpoint.departments d ON u.dept_id = d.id
            WHERE f.status = 'done'
        """

        # === ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡∏° ===
        query_team = """
            SELECT 
                d.dept_name,
                d.dept_name AS owner,
                f.message,
                f.upload_time,
                f.new_name,
                '‡∏ó‡∏µ‡∏°' AS type
            FROM kpigoalpoint.file_messages_team f
            JOIN kpigoalpoint.departments d ON f.dept_ref_id = d.id
            WHERE f.status = 'done'
        """

        df_personal = pd.read_sql(query_personal, conn)
        df_team = pd.read_sql(query_team, conn)

        df_all = pd.concat([df_personal, df_team], ignore_index=True)
        df_all = df_all.rename(columns={
            "dept_name": "‡∏ó‡∏µ‡∏°",
            "owner": "‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠",
            "message": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
            "upload_time": "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î",
            "new_name": "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
            "type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
        })

        # --- ‡∏à‡∏±‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ui.table ---
        if not df_all.empty:
            # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ DB ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö parse ‡∏Å‡πà‡∏≠‡∏ô
            df_all["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"] = pd.to_datetime(df_all["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"], errors="coerce")

        df_all = df_all.sort_values(by=["‡∏ó‡∏µ‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"], ascending=[True, False])

        # === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏° ‡∏î‡πâ‡∏ß‡∏¢ ui.table() ===
        cols = ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"]

        if df_all.empty:
            st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'done'")
        else:
            for team_name, group_df in df_all.groupby("‡∏ó‡∏µ‡∏°", sort=False):
                st.markdown(f"### ‡∏ó‡∏µ‡∏°: {team_name}")
                display_df = group_df[cols].copy()
                # ‡πÅ‡∏õ‡∏•‡∏á datetime ‡πÄ‡∏õ‡πá‡∏ô string
                if "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" in display_df.columns:
                    display_df["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"] = pd.to_datetime(display_df["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"], errors="coerce").dt.strftime("%Y-%m-%d %H:%M")
                # ‡πÅ‡∏õ‡∏•‡∏á NaN ‡πÄ‡∏õ‡πá‡∏ô None
                display_df = display_df.astype(object).where(pd.notnull(display_df), None)
                # ‡∏™‡πà‡∏á DataFrame ‡∏ï‡∏£‡∏á‡πÜ ‡πÉ‡∏´‡πâ ui.table
                ui.table(display_df, maxHeight=300)

    elif selected_action == "History use point":
        
        st.title("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point")
        st.write('------')

        conn = get_connection_app()

        # --- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ---
        query_user = """
            SELECT 
                d.dept_name,
                u.full_name AS owner,
                r.upload_time,
                rw.reward_name,
                rw.reward_point,
                '‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' AS type
            FROM kpigoalpoint.req_user_team r
            JOIN kpigoalpoint.users u ON r.requester_ref_id = u.user_id
            JOIN kpigoalpoint.departments d ON u.dept_id = d.id
            LEFT JOIN kpigoalpoint.reward rw ON r.reward_id = rw.id
            WHERE r.requester_type = 'user' AND r.status = 'approved'
        """

        # --- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡∏° ---
        query_team = """
            SELECT 
                d.dept_name,
                d.dept_name AS owner,
                r.upload_time,
                rw.reward_name,
                rw.reward_point,
                '‡∏ó‡∏µ‡∏°' AS type
            FROM kpigoalpoint.req_user_team r
            JOIN kpigoalpoint.departments d ON r.requester_ref_id::int = d.id
            LEFT JOIN kpigoalpoint.reward rw ON r.reward_id = rw.id
            WHERE r.requester_type = 'team' AND r.status = 'approved'
        """

        df_user = pd.read_sql(query_user, conn)
        df_team = pd.read_sql(query_team, conn)

        df_all = pd.concat([df_user, df_team], ignore_index=True)
        df_all = df_all.rename(columns={
            "dept_name": "‡∏ó‡∏µ‡∏°",
            "owner": "‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠",
            "reward_name": "‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
            "reward_point": "‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ",
            "upload_time": "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
            "type": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
        })

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô string
        if "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" in df_all.columns:
            df_all["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"] = pd.to_datetime(df_all["‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"], errors="coerce").dt.strftime("%Y-%m-%d %H:%M")
        # ‡πÅ‡∏õ‡∏•‡∏á NaN ‡πÄ‡∏õ‡πá‡∏ô None ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ serialize ‡πÑ‡∏î‡πâ
        df_all = df_all.astype(object).where(pd.notnull(df_all), None)
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df_all = df_all.sort_values(by=["‡∏ó‡∏µ‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"], ascending=[True, False])
        cols = ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠", "‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", "‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"]
        # === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏° ‡∏î‡πâ‡∏ß‡∏¢ ui.table() ===
        if df_all.empty:
            st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
        else:
            for team_name, group_df in df_all.groupby("‡∏ó‡∏µ‡∏°", sort=False):
                st.markdown(f"### ‡∏ó‡∏µ‡∏°: {team_name}")
                ui.table(
                    group_df[cols],
                    maxHeight=300
                )