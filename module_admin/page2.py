import streamlit as st
import streamlit_shadcn_ui as ui
from db import get_connection_app
import pandas as pd
import bcrypt


def admin_page2():
    st.title("üë§ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

    action = ["‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"]
    
    
    st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_dept = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)

    st.markdown("---")

    if selected_dept == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà")
        try:
            conn = get_connection_app()
            cur = conn.cursor()

            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
            dept_df = pd.read_sql("SELECT id, dept_name FROM kpigoalpoint.departments ORDER BY dept_name", conn)
            dept_options = dict(zip(dept_df['dept_name'], dept_df['id']))
            dept_selected = st.selectbox("‡πÅ‡∏ú‡∏ô‡∏Å", list(dept_options.keys()))
            dept_id = dept_options[dept_selected]

            # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            user_id = st.text_input("User ID", key="user_id")
            col1, col2 = st.columns(2)
            with col1:
                password = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", key="password")
            with col2:
                confirm_password = st.text_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", key="confirm_password")

            full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", key="full_name")
            nickname = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", key="nickname")
            email = st.text_input("Email (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)", placeholder="someone@example.com", key="email")
            phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)", key="phone")
            role = st.selectbox("‡∏ö‡∏ó‡∏ö‡∏ö‡∏≤‡∏ó", ["user", "admin"], key="role")
            role_position = st.text_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", key="role_position")

            submit = st.button("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

            if submit:
                if not user_id or not full_name or not nickname:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å user_id, ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô")
                    return
                if not password or not confirm_password:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
                    return
                if password != confirm_password:
                    st.warning("‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
                    return
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    cur.execute("SELECT 1 FROM kpigoalpoint.users WHERE user_id = %s", (user_id,))
                    if cur.fetchone():
                        st.warning("‚ö†Ô∏è User ID ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∑‡πà‡∏ô")
                        return
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° user
                    cur.execute("""
                        INSERT INTO kpigoalpoint.users (
                            user_id, full_name, nickname, email,
                            phone_number, role_onweb, role_position, dept_id
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    """, (
                        user_id, full_name, nickname, email or None,
                        phone or None, role, role_position or None, dept_id
                    ))
                    # hash password ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° auth_credentials
                    hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

                    cur.execute("""
                        INSERT INTO kpigoalpoint.auth_credentials (
                            user_id, hashed_password
                        ) VALUES (%s, %s)
                    """, (user_id, hashed_pw))
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0 ‡πÉ‡∏´‡πâ personal_points
                    cur.execute("""
                        INSERT INTO kpigoalpoint.personal_points (
                            user_ref_id, point_value
                        ) VALUES (%s, %s)
                    """, (user_id, 0))
                    conn.commit()
                    st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session state
                    # st.session_state["user_id"] = ""
                    # st.session_state["full_name"] = ""
                    # st.session_state["nickname"] = ""
                    # st.session_state["email"] = ""
                    # st.session_state["phone"] = ""
                    # st.session_state["role_position"] = ""
                    # st.session_state["password"] = ""
                    # st.session_state["confirm_password"] = ""

                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏•‡∏û‡∏•‡∏≤‡∏î: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏ß: {e}")


    elif selected_dept == "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
        st.subheader("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

        try:
            conn = get_connection_app()
            cur = conn.cursor()

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            user_df = pd.read_sql("SELECT user_id, full_name, nickname FROM kpigoalpoint.users ORDER BY full_name", conn)

            if user_df.empty:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                user_map = {
                    f"{row['full_name']} ({row['nickname']})": row['user_id']
                    for _, row in user_df.iterrows()
                }

                selected_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", list(user_map.keys()))
                selected_user_id = user_map[selected_display]

                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                cur.execute("""
                    SELECT full_name, nickname, email, phone_number, role_onweb, role_position, dept_id
                    FROM kpigoalpoint.users
                    WHERE user_id = %s
                """, (selected_user_id,))
                row = cur.fetchone()

                if row:
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å
                    dept_df = pd.read_sql("SELECT id, dept_name FROM kpigoalpoint.departments ORDER BY dept_name", conn)
                    dept_options = dict(zip(dept_df['dept_name'], dept_df['id']))
                    dept_name_reverse = {v: k for k, v in dept_options.items()}

                    # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    full_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", value=row[0])
                    nickname = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value=row[1])
                    email = st.text_input("Email", value=row[2] or "")
                    phone = st.text_input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£", value=row[3] or "")
                    role = st.selectbox("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó", ["user", "admin"], index=["user", "admin"].index(row[4]))
                    role_position = st.text_input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", value=row[5] or "")
                    dept_selected = st.selectbox("‡πÅ‡∏ú‡∏ô‡∏Å", list(dept_options.keys()), index=list(dept_options.values()).index(row[6]))
                    dept_id = dept_options[dept_selected]

                    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"):
                        try:
                            cur.execute("""
                                UPDATE kpigoalpoint.users
                                SET full_name = %s,
                                    nickname = %s,
                                    email = %s,
                                    phone_number = %s,
                                    role_onweb = %s,
                                    role_position = %s,
                                    dept_id = %s,
                                    updated_at = NOW()
                                WHERE user_id = %s
                            """, (
                                full_name, nickname, email or None, phone or None,
                                role, role_position or None, dept_id, selected_user_id
                            ))
                            conn.commit()
                            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á {selected_display} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        except Exception as e:
                            conn.rollback()
                            st.error(f"‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        except Exception as e:
            st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")


    elif selected_dept == "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ":
        st.subheader("üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        try:
            conn = get_connection_app()
            cur = conn.cursor()
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            user_df = pd.read_sql("SELECT user_id, full_name, nickname FROM kpigoalpoint.users ORDER BY full_name", conn)
            if user_df.empty:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                # dropdown ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠
                user_map = {
                    f"{row['full_name']} ({row['nickname']})": row['user_id']
                    for _, row in user_df.iterrows()
                }
                selected_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", list(user_map.keys()))
                selected_user_id = user_map[selected_display]

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                cur.execute("""
                    SELECT COALESCE(SUM(point_value), 0)
                    FROM kpigoalpoint.personal_points
                    WHERE user_ref_id = %s
                """, (selected_user_id,))
                point_total = cur.fetchone()[0]

                if point_total > 0:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
                else:
                    # Confirm 2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
                    confirm_1 = st.checkbox(f"‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö '{selected_display}'?", key="confirm1")
                    submit = st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", key="delete_user")

                    if submit:
                        if confirm_1:
                            try:
                                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_credentials (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ foreign key)
                                cur.execute("DELETE FROM kpigoalpoint.auth_credentials WHERE user_id = %s", (selected_user_id,))
                                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô personal_points (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ point_value = 0 ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö)
                                cur.execute("DELETE FROM kpigoalpoint.personal_points WHERE user_ref_id = %s", (selected_user_id,))
                                # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô users
                                cur.execute("DELETE FROM kpigoalpoint.users WHERE user_id = %s", (selected_user_id,))
                                conn.commit()
                                st.success(f"‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {selected_display} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            except Exception as e:
                                conn.rollback()
                                st.error(f"‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                        else:
                            st.warning("‡∏™‡∏ï‡∏¥‡∏à‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô")
                    
        except Exception as e:
            st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
