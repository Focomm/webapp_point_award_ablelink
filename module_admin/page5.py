import streamlit as st
import streamlit_shadcn_ui as ui
from sqlalchemy import text
import pandas as pd
from db import get_connection_app


def admin_page5():
    action = ["Add KPI","Delete KPI", "Manage Award", "View KPI ALL"]
    st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    selected_KPI = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)
    
    
    if selected_KPI == "Add KPI":
        st.title("üìä ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI")
        st.write('------')

        try:
            conn = get_connection_app()

            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó KPI
            # kpi_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó KPI", ("‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏ó‡∏µ‡∏°"))
            kpi_type = ui.tabs(options=['‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏µ‡∏°'], default_value='‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', key="kanaries")

            if kpi_type == "‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•":
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                users_query = text("SELECT user_id, full_name FROM kpigoalpoint.users ORDER BY full_name")
                result = conn.execute(users_query)
                users = result.fetchall()

                if not users:
                    st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á KPI")
                else:
                    user_dict = {f"{row.full_name} ({row.user_id})": row.user_id for row in users}
                    selected_user_display = st.selectbox("üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", list(user_dict.keys()))
                    selected_user_id = user_dict[selected_user_display]

                    st.write('------')
                    kpi_name = st.text_input("üéØ ‡∏ä‡∏∑‡πà‡∏≠ KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
                    kpi_goal = st.text_area("üìå ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á KPI")
                    point_value = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", min_value=0, step=1)
                    # add_kpi_button = ui.button("‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="add_kpi_personal",variant="destructive")
                    add_kpi_button_personal = ui.button("‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="add_kpi_personal",variant="default")

                    if add_kpi_button_personal:
                        if not kpi_name.strip() or not kpi_goal.strip():
                            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                        else:
                            try:
                                insert_query = text("""
                                    INSERT INTO kpigoalpoint.kpi_personal (
                                        user_ref_id, kpi_name, kpi_goal, point_value
                                    ) VALUES (
                                        :user_ref_id, :kpi_name, :kpi_goal, :point_value
                                    )
                                """)
                                conn.execute(insert_query, {
                                    "user_ref_id": selected_user_id,
                                    "kpi_name": kpi_name.strip(),
                                    "kpi_goal": kpi_goal.strip(),
                                    "point_value": point_value
                                })
                                conn.commit()
                                st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {selected_user_id}")
                            except Exception as e:
                                conn.rollback()
                                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

            elif kpi_type == "‡∏ó‡∏µ‡∏°":
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
                dept_query = text("SELECT id, dept_name FROM kpigoalpoint.departments ORDER BY dept_name")
                result = conn.execute(dept_query)
                departments = result.fetchall()

                if not departments:
                    st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á KPI")
                else:
                    dept_dict = {f"{row.dept_name}": row.id for row in departments}
                    selected_dept_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", list(dept_dict.keys()))
                    selected_dept_id = dept_dict[selected_dept_display]

                    st.write('------')
                    kpi_name = st.text_input("üéØ ‡∏ä‡∏∑‡πà‡∏≠ KPI ‡∏ó‡∏µ‡∏°")
                    kpi_goal = st.text_area("üìå ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á KPI ‡∏ó‡∏µ‡∏°")
                    point_value = st.number_input("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", min_value=0, step=1)
                    add_kpi_button_team = ui.button("‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏ó‡∏µ‡∏°", key="add_kpi_team",variant="default")


                    if add_kpi_button_team:
                        if not kpi_name.strip() or not kpi_goal.strip():
                            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                        else:
                            try:
                                insert_query = text("""
                                    INSERT INTO kpigoalpoint.kpi_team (
                                        dept_ref_id, kpi_name, kpi_goal, point_value
                                    ) VALUES (
                                        :dept_ref_id, :kpi_name, :kpi_goal, :point_value
                                    )
                                """)
                                conn.execute(insert_query, {
                                    "dept_ref_id": selected_dept_id,
                                    "kpi_name": kpi_name.strip(),
                                    "kpi_goal": kpi_goal.strip(),
                                    "point_value": point_value
                                })
                                conn.commit()
                                st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏ó‡∏µ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å: {selected_dept_display}")
                            except Exception as e:
                                conn.rollback()
                                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        finally:
            if 'conn' in locals():
                conn.close()

        
    
    elif selected_KPI == "Delete KPI":
        st.title("üóëÔ∏è ‡∏•‡∏ö KPI")
        st.write("------")

        try:
            conn = get_connection_app()

            # kpi_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", ("‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏ó‡∏µ‡∏°"))
            kpi_type = ui.tabs(options=['‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏µ‡∏°'], default_value='‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', key="kanaries")

            if kpi_type == "‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•":
                # ‡∏î‡∏∂‡∏á KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
                result = conn.execute(text("""
                    SELECT p.id, u.full_name, p.kpi_name
                    FROM kpigoalpoint.kpi_personal p
                    JOIN kpigoalpoint.users u ON p.user_ref_id = u.user_id
                    ORDER BY u.full_name, p.kpi_name
                """))
                rows = result.fetchall()

                if not rows:
                    st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö")
                else:
                    kpi_dict = {
                        f"{row.full_name} ‚Üí {row.kpi_name} (ID: {row.id})": row.id for row in rows
                    }
                    selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", list(kpi_dict.keys()), key="kpi_personal_select")
                    selected_id = kpi_dict[selected_label]

                    confirm = st.checkbox("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI ‡∏ô‡∏µ‡πâ?", key="confirm_kpi_personal")
                    delete_kpi_button_personal = ui.button("‡∏•‡∏ö KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="delete_kpi_personal",variant="destructive")

                    if delete_kpi_button_personal:
                        if confirm:
                            try:
                                conn.execute(text("DELETE FROM kpigoalpoint.kpi_personal WHERE id = :id"), {"id": selected_id})
                                conn.commit()
                                st.success("‚úÖ ‡∏•‡∏ö KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            except Exception as e:
                                conn.rollback()
                                st.error(f"‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                        else:
                            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö KPI ‡∏ô‡∏µ‡πâ")

            elif kpi_type == "‡∏ó‡∏µ‡∏°":
                # ‡∏î‡∏∂‡∏á KPI ‡∏ó‡∏µ‡∏°
                result = conn.execute(text("""
                    SELECT t.id, d.dept_name, t.kpi_name
                    FROM kpigoalpoint.kpi_team t
                    JOIN kpigoalpoint.departments d ON t.dept_ref_id = d.id
                    ORDER BY d.dept_name, t.kpi_name
                """))
                rows = result.fetchall()

                if not rows:
                    st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏ö")
                else:
                    kpi_dict = {
                        f"{row.dept_name} ‚Üí {row.kpi_name} (ID: {row.id})": row.id for row in rows
                    }
                    selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", list(kpi_dict.keys()), key="kpi_team_select")
                    selected_id = kpi_dict[selected_label]

                    confirm = st.checkbox("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ?", key="confirm_kpi_team")
                    delete_kpi_button_team = ui.button("‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°", key="delete_kpi_team",variant="destructive")


                    if delete_kpi_button_team:
                        if confirm:
                            try:
                                conn.execute(text("DELETE FROM kpigoalpoint.kpi_team WHERE id = :id"), {"id": selected_id})
                                conn.commit()
                                st.success("‚úÖ ‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            except Exception as e:
                                conn.rollback()
                                st.error(f"‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                        else:
                            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        finally:
            if 'conn' in locals():
                conn.close()
        
    elif selected_KPI == "Manage Award":
        
        st.title("üèÜ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (Reward)")
        st.write("------")

        try:
            conn = get_connection_app()

            # --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ---
            st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà")
            # reward_type = st.radio("üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", ("user", "team"), key="reward_type_add")
            reward_type = ui.tabs(options=['‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', '‡∏ó‡∏µ‡∏°'], default_value='‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•', key="kanaries")
            reward_name = st.text_input("üèÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", key="reward_name_add")
            reward_point = st.number_input("üéÅ Point ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏Å", min_value=1, step=1, key="reward_point_add")


            add_reward_button = ui.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", key="add_reward",variant="default")

            if add_reward_button:
                if not reward_name.strip():
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                else:
                    try:
                        conn.execute(text("""
                            INSERT INTO kpigoalpoint.reward (reward_type, reward_name, reward_point)
                            VALUES (:reward_type, :reward_name, :reward_point)
                        """), {
                            "reward_type": reward_type,
                            "reward_name": reward_name.strip(),
                            "reward_point": reward_point
                        })
                        conn.commit()
                        st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {reward_name.strip()}")
                    except Exception as e:
                        conn.rollback()
                        st.error(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

            st.divider()

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ---
            st.subheader("‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")

            result = conn.execute(text("""
                SELECT id, reward_type, reward_name, reward_point
                FROM kpigoalpoint.reward
                ORDER BY reward_type, reward_name
            """))
            rewards = result.fetchall()

            if not rewards:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                reward_dict = {
                    f"[{row.reward_type}] {row.reward_name} ({row.reward_point} pts)": row.id
                    for row in rewards
                }

                selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", list(reward_dict.keys()), key="reward_delete_select")
                selected_id = reward_dict[selected_label]

                confirm = st.checkbox("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ", key="confirm_delete_reward")
                delete_reward_button = ui.button("‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", key="delete_reward", variant="destructive")

                if delete_reward_button:
                    if not confirm:
                        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡πä‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö")
                    else:
                        try:
                            conn.execute(text("""
                                DELETE FROM kpigoalpoint.reward
                                WHERE id = :id
                            """), {"id": selected_id})
                            conn.commit()
                            st.success("‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()
                        except Exception as e:
                            conn.rollback()
                            st.error(f"‚ùå ‡∏•‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        finally:
            if 'conn' in locals():
                conn.close()
    
    elif selected_KPI == "View KPI ALL":
        st.title("üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ KPI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

        conn = get_connection_app()

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß + ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô + ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
        personal_query = """
            SELECT 
                d.dept_name,
                u.full_name AS owner,
                p.kpi_name,
                p.kpi_goal,
                p.point_value
            FROM kpigoalpoint.kpi_personal p
            JOIN kpigoalpoint.users u ON p.user_ref_id = u.user_id
            JOIN kpigoalpoint.departments d ON u.dept_id = d.id
        """


        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI ‡∏ó‡∏µ‡∏° + ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
        team_query = """
            SELECT 
                d.dept_name,
                d.dept_name AS owner,
                t.kpi_name,
                t.kpi_goal,
                t.point_value
            FROM kpigoalpoint.kpi_team t
            JOIN kpigoalpoint.departments d ON t.dept_ref_id = d.id
        """


        df_personal = pd.read_sql(personal_query, conn)
        df_personal["type"] = "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"

        df_team = pd.read_sql(team_query, conn)
        df_team["type"] = "‡∏ó‡∏µ‡∏°"

        # ‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        df_all = pd.concat([df_personal, df_team], ignore_index=True)
        df_all = df_all.rename(columns={
            "owner": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö",
            "kpi_name": "‡∏ä‡∏∑‡πà‡∏≠ KPI",
            "kpi_goal": "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
            "point_value": "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
            "dept_name": "‡∏ó‡∏µ‡∏°"
        })

        df_all = df_all.sort_values(by=["‡∏ó‡∏µ‡∏°", "type", "‡∏ä‡∏∑‡πà‡∏≠ KPI"])

        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
        for team_name, group_df in df_all.groupby("‡∏ó‡∏µ‡∏°"):
            st.markdown(f"### ‡∏ó‡∏µ‡∏°: {team_name}")
            ui.table(
                    group_df[["type", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠ KPI", "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]],
                    maxHeight=300
                )
            # st.dataframe(
            #     group_df[["type", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠ KPI", "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"]],
            #     use_container_width=True
            # )

