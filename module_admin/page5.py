import streamlit as st
import streamlit_shadcn_ui as ui
from sqlalchemy import text
from db import get_connection_app


def admin_page5():
    action = ["Add KPI Personal", "Add KPI TEAM","Delete KPI Personal","Delete KPI TEAM"]
    st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_KPI = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)
    
    
    if selected_KPI == "Add KPI Personal":
        st.title("üìä ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• test")

        try:
            conn = get_connection_app()

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
            users_query = text("SELECT user_id, full_name FROM kpigoalpoint.users ORDER BY full_name")
            result = conn.execute(users_query)
            users = result.fetchall()

            if not users:
                st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á KPI")
                conn.close()
                return

            # ‡πÅ‡∏™‡∏î‡∏á dropdown ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å user
            user_dict = {f"{row.full_name} ({row.user_id})": row.user_id for row in users}
            selected_user_display = st.selectbox("üë§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", list(user_dict.keys()))
            selected_user_id = user_dict[selected_user_display]

            # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI
            kpi_name = st.text_input("üéØ ‡∏ä‡∏∑‡πà‡∏≠ KPI")
            kpi_goal = st.text_area("üìå ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á KPI")
            point_value = st.number_input("ü™ô ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", min_value=0, step=1)

            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI"):
                if not kpi_name.strip() or not kpi_goal.strip():
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                else:
                    try:
                        insert_query = text("""
                            INSERT INTO kpigoalpoint.kpi_personal (
                                user_ref_id, kpi_name, kpi_goal, point_value
                            ) VALUES (
                                :user_ref_id, :kpi_name, :kpi_goal, :point_value
                            )
                        """)
                        conn.execute(insert_query, {
                            "user_ref_id": selected_user_id,
                            "kpi_name": kpi_name.strip(),
                            "kpi_goal": kpi_goal.strip(),
                            "point_value": point_value
                        })

                        conn.commit()  # ‚úÖ commit ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                        st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {selected_user_id}")

                    except Exception as e:
                        conn.rollback()  # ‚úÖ rollback ‡∏´‡∏≤‡∏Å‡∏°‡∏µ error
                        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                    finally:
                        conn.close()

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")


    elif selected_KPI == "Add KPI TEAM":
        st.title("üìä KPI ‡∏ó‡∏µ‡∏°")

        try:
            conn = get_connection_app()

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
            dept_query = text("SELECT id, dept_name FROM kpigoalpoint.departments ORDER BY dept_name")
            result = conn.execute(dept_query)
            departments = result.fetchall()

            if not departments:
                st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á KPI")
                return

            # ‡πÅ‡∏™‡∏î‡∏á dropdown ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
            dept_dict = {f"{row.dept_name}": row.id for row in departments}
            selected_dept_display = st.selectbox("üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", list(dept_dict.keys()))
            selected_dept_id = dept_dict[selected_dept_display]

            # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI
            kpi_name = st.text_input("üéØ ‡∏ä‡∏∑‡πà‡∏≠ KPI ‡∏ó‡∏µ‡∏°")
            kpi_goal = st.text_area("üìå ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á KPI ‡∏ó‡∏µ‡∏°")
            point_value = st.number_input("ü™ô ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", min_value=0, step=1)

            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏ó‡∏µ‡∏°"):
                if not kpi_name.strip() or not kpi_goal.strip():
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                    return

                try:
                    insert_query = text("""
                        INSERT INTO kpigoalpoint.kpi_team (
                            dept_ref_id, kpi_name, kpi_goal, point_value
                        ) VALUES (
                            :dept_ref_id, :kpi_name, :kpi_goal, :point_value
                        )
                    """)
                    conn.execute(insert_query, {
                        "dept_ref_id": selected_dept_id,
                        "kpi_name": kpi_name.strip(),
                        "kpi_goal": kpi_goal.strip(),
                        "point_value": point_value
                    })

                    conn.commit()
                    st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏ó‡∏µ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å: {selected_dept_display}")

                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                finally:
                    conn.close()

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    elif selected_KPI == "Delete KPI Personal":
        st.title("üóëÔ∏è ‡∏•‡∏ö KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
        try:
            conn = get_connection_app()

            result = conn.execute(text("""
                SELECT p.id, u.full_name, p.kpi_name
                FROM kpigoalpoint.kpi_personal p
                JOIN kpigoalpoint.users u ON p.user_ref_id = u.user_id
                ORDER BY u.full_name, p.kpi_name
            """))
            rows = result.fetchall()

            if not rows:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö")
                return

            kpi_dict = {f"{row.full_name} ‚Üí {row.kpi_name} (ID: {row.id})": row.id for row in rows}
            selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", list(kpi_dict.keys()))
            selected_id = kpi_dict[selected_label]

            confirm = st.checkbox(f"‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI ‡∏ô‡∏µ‡πâ?", key="confirm_kpi_personal")

            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI"):
                if confirm:
                    try:
                        conn.execute(text("DELETE FROM kpigoalpoint.kpi_personal WHERE id = :id"), {"id": selected_id})
                        conn.commit()
                        st.success("‚úÖ ‡∏•‡∏ö KPI ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    except Exception as e:
                        conn.rollback()
                        st.error(f"‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                else:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö KPI ‡∏ô‡∏µ‡πâ")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    elif selected_KPI == "Delete KPI TEAM":
        st.title("üóëÔ∏è ‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°")
        try:
            conn = get_connection_app()

            result = conn.execute(text("""
                SELECT t.id, d.dept_name, t.kpi_name
                FROM kpigoalpoint.kpi_team t
                JOIN kpigoalpoint.departments d ON t.dept_ref_id = d.id
                ORDER BY d.dept_name, t.kpi_name
            """))
            rows = result.fetchall()

            if not rows:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏ö")
                return

            kpi_dict = {f"{row.dept_name} ‚Üí {row.kpi_name} (ID: {row.id})": row.id for row in rows}
            selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", list(kpi_dict.keys()))
            selected_id = kpi_dict[selected_label]

            confirm = st.checkbox(f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ?", key="confirm_kpi_team")

            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö KPI"):
                if confirm:
                    try:
                        conn.execute(text("DELETE FROM kpigoalpoint.kpi_team WHERE id = :id"), {"id": selected_id})
                        conn.commit()
                        st.success("‚úÖ ‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    except Exception as e:
                        conn.rollback()
                        st.error(f"‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                else:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö KPI ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

