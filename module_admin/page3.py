import streamlit as st
import streamlit_shadcn_ui as ui
import pandas as pd
import psycopg2
from psycopg2.extras import RealDictCursor
from db import get_connection_app


def admin_page3():
    st.title("‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Point")

    action = ["‡πÄ‡∏û‡∏¥‡πà‡∏° Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‡πÄ‡∏û‡∏¥‡πà‡∏° Point ‡∏ó‡∏µ‡∏°"]
    st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_dept = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)
    try:
        conn = get_connection_app()
        cur = conn.cursor()

        if selected_dept == "‡πÄ‡∏û‡∏¥‡πà‡∏° Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß":
            st.markdown("### ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î Point ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")

            # ‡∏î‡∏∂‡∏á user
            user_df = pd.read_sql("SELECT user_id, full_name, nickname FROM kpigoalpoint.users ORDER BY full_name", conn)
            user_map = {
                f"{row['full_name']} ({row['nickname']})": row['user_id']
                for _, row in user_df.iterrows()
            }

            selected_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", list(user_map.keys()))
            selected_user_id = user_map[selected_display]

            # ‡∏î‡∏∂‡∏á point ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            try:
                cur.execute(
                    "SELECT point_value FROM kpigoalpoint.personal_points WHERE user_ref_id = %s",
                    (selected_user_id,)
                )
                row = cur.fetchone()
                current_point = row[0] if row else 0
            except Exception as e:
                current_point = 0
                st.warning(f"‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• point ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                
            # ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            point_input = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Point", min_value=1, step=1)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            col_preview1, col_preview2, col_preview3 = st.columns(3)
            
            with col_preview1:
                ui.metric_card(title="Point ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", content=int(current_point), description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="card1")
            with col_preview2:
                ui.metric_card(title="Point ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", content=int(current_point + point_input), description="‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="card2")
            with col_preview3:
                ui.metric_card(title="Point ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏î", content=int(max(0, current_point - point_input)), description="‡∏´‡∏≤‡∏Å‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="card3")

            col1, col2,col3 = st.columns(3)

            if col2.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Point"):
                try:
                    cur.execute("""
                        UPDATE kpigoalpoint.personal_points
                        SET point_value = point_value + %s
                        WHERE user_ref_id = %s
                    """, (point_input, selected_user_id))
                    conn.commit()
                    st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {point_input} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ {selected_display} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    st.rerun()
                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

            if col3.button("‚ûñ ‡∏•‡∏î Point"):
                try:
                    cur.execute("""
                        UPDATE kpigoalpoint.personal_points
                        SET point_value = GREATEST(0, point_value - %s)
                        WHERE user_ref_id = %s
                    """, (point_input, selected_user_id))
                    conn.commit()
                    st.success(f"‚úÖ ‡∏•‡∏î {point_input} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á {selected_display} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    st.rerun()
                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        elif selected_dept == "‡πÄ‡∏û‡∏¥‡πà‡∏° Point ‡∏ó‡∏µ‡∏°":
            st.markdown("### ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î Point ‡∏£‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏Å")

            # ‡∏î‡∏∂‡∏á‡πÅ‡∏ú‡∏ô‡∏Å
            dept_df = pd.read_sql("SELECT id, dept_name, point_dpmt FROM kpigoalpoint.departments ORDER BY dept_name", conn)
            dept_map = {
                row['dept_name']: (row['id'], row['point_dpmt'])
                for _, row in dept_df.iterrows()
            }

            selected_dept_name = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", list(dept_map.keys()))
            selected_dept_id, current_point = dept_map[selected_dept_name]

            # ‡∏Å‡∏£‡∏≠‡∏Å point ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î
            point_input = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Point", min_value=1, step=1, key="team_point")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            col_preview1, col_preview2, col_preview3 = st.columns(3)
            with col_preview1:
                ui.metric_card(title="Point ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", content=int(current_point), description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å", key="team_card1")
            with col_preview2:
                ui.metric_card(title="Point ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", content=int(current_point + point_input), description="‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="team_card2")
            with col_preview3:
                ui.metric_card(title="Point ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏î", content=int(max(0, current_point - point_input)), description="‡∏´‡∏≤‡∏Å‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="team_card3")

            col1, col2, col3 = st.columns(3)
            if col2.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Point ‡∏ó‡∏µ‡∏°"):
                try:
                    cur.execute("""
                        UPDATE kpigoalpoint.departments
                        SET point_dpmt = point_dpmt + %s
                        WHERE id = %s
                    """, (point_input, selected_dept_id))
                    conn.commit()
                    st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {point_input} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏° {selected_dept_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    st.rerun()
                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

            if col3.button("‚ûñ ‡∏•‡∏î Point ‡∏ó‡∏µ‡∏°"):
                try:
                    cur.execute("""
                        UPDATE kpigoalpoint.departments
                        SET point_dpmt = GREATEST(0, point_dpmt - %s)
                        WHERE id = %s
                    """, (point_input, selected_dept_id))
                    conn.commit()
                    st.success(f"‚úÖ ‡∏•‡∏î {point_input} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° {selected_dept_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                    st.rerun()
                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
