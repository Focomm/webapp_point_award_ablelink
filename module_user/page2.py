import streamlit as st
import streamlit_shadcn_ui as ui
import pandas as pd
from db import get_connection_app
from sqlalchemy import text

def user_page2():
    action = ["‡πÇ‡∏≠‡∏ô Point", "‡πÅ‡∏•‡∏Å Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°","‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô point"]
    st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_dept = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)

    if selected_dept == "‡πÇ‡∏≠‡∏ô Point":
        st.title("üîÑ ‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô")

        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user_id ‡πÉ‡∏ô session")
            return

        try:
            conn = get_connection_app()

            # ‡∏î‡∏∂‡∏á point ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
            result = conn.execute(text("""
                SELECT point_value FROM kpigoalpoint.personal_points
                WHERE user_ref_id = :uid
            """), {"uid": user_id})
            row = result.fetchone()
            current_point = int(row[0]) if row and row[0] is not None else 0

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
            user_df = pd.read_sql(text("""
                SELECT user_id, full_name, nickname
                FROM kpigoalpoint.users
                WHERE user_id != :uid
                ORDER BY full_name
            """), conn, params={"uid": user_id})

            user_map = {
                f"{row['full_name']} ({row['nickname']})": row['user_id']
                for _, row in user_df.iterrows()
            }

            recipient_display = st.selectbox("üë• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö Point", list(user_map.keys()))
            recipient_user_id = user_map[recipient_display]

            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
            point_input = st.number_input("üì§ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô", min_value=1, step=1)

            col_preview1, col_preview2 = st.columns(2)
            with col_preview1:
                ui.metric_card(title="Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", content=current_point, description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="card1")
            with col_preview2:
                ui.metric_card(title="Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡∏ô", content=max(0, current_point - point_input), description="‡∏´‡∏≤‡∏Å‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="card2")

            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô"):
                if point_input > current_point:
                    st.warning("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Point ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
                else:
                    try:
                        with conn.begin():
                            conn.execute(text("""
                                UPDATE kpigoalpoint.personal_points
                                SET point_value = point_value - :amount
                                WHERE user_ref_id = :uid
                            """), {"amount": point_input, "uid": user_id})

                            conn.execute(text("""
                                UPDATE kpigoalpoint.personal_points
                                SET point_value = point_value + :amount
                                WHERE user_ref_id = :rid
                            """), {"amount": point_input, "rid": recipient_user_id})

                        st.success(f"‚úÖ ‡πÇ‡∏≠‡∏ô {point_input} Point ‡πÉ‡∏´‡πâ {recipient_display} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                        st.rerun()

                    except Exception as e:
                        st.error(f"‚ùå ‡πÇ‡∏≠‡∏ô Point ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            
    elif selected_dept == "‡πÅ‡∏•‡∏Å Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß":
        st.title("üéÅ ‡πÅ‡∏•‡∏Å Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
        st.write("------")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡∏≠‡∏¢‡∏π‡πà
        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà")
            st.stop()

        try:
            conn = get_connection_app()

            # ‚úÖ ‡∏î‡∏∂‡∏á point ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            result = conn.execute(text("""
                SELECT point_value
                FROM kpigoalpoint.personal_points
                WHERE user_ref_id = :user_id
            """), {"user_id": user_id})
            point_row = result.fetchone()
            user_point = point_row.point_value if point_row else 0
            st.markdown(f"üí∞ Point ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: **{user_point:,}**")

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ reward ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user
            result = conn.execute(text("""
                SELECT id, reward_name, reward_point
                FROM kpigoalpoint.reward
                WHERE reward_type = 'user'
                ORDER BY reward_point, reward_name
            """))
            rewards = result.fetchall()

            if not rewards:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            else:
                reward_dict = {
                    f"{row.reward_name} ({row.reward_point} pts)": (row.id, row.reward_point)
                    for row in rewards
                }

                selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å", list(reward_dict.keys()))
                selected_reward_id, selected_reward_point = reward_dict[selected_label]

                st.markdown(f"üéØ Point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: **{selected_reward_point:,}**")

                if user_point < selected_reward_point:
                    st.warning("‚ö†Ô∏è Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ")
                else:
                    if st.button("üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point"):
                        try:
                            # ‚úÖ ‡∏´‡∏±‡∏Å point
                            result = conn.execute(text("""
                                UPDATE kpigoalpoint.personal_points
                                SET point_value = point_value - :used_point
                                WHERE user_ref_id = :user_id AND point_value >= :used_point
                            """), {
                                "used_point": selected_reward_point,
                                "user_id": user_id
                            })

                            if result.rowcount == 0:
                                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏±‡∏Å point ‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                                st.stop()

                            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
                            conn.execute(text("""
                                INSERT INTO kpigoalpoint.req_user_team (
                                    requester_type,
                                    requester_ref_id,
                                    reward_id
                                ) VALUES (
                                    'user',
                                    :user_id,
                                    :reward_id
                                )
                            """), {
                                "user_id": user_id,
                                "reward_id": selected_reward_id
                            })

                            conn.commit()
                            st.success("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()

                        except Exception as e:
                            conn.rollback()
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        finally:
            if 'conn' in locals():
                conn.close()

        
                
                
    elif selected_dept == "‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°":
        st.title("üè¢ ‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°")
        st.write("------")

        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà")
            st.stop()

        try:
            conn = get_connection_app()

            # üîç ‡∏î‡∏∂‡∏á dept_id ‡πÅ‡∏•‡∏∞ point ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
            result = conn.execute(text("""
                SELECT d.id AS dept_id, d.point_dpmt
                FROM kpigoalpoint.users u
                JOIN kpigoalpoint.departments d ON u.dept_id = d.id
                WHERE u.user_id = :user_id
            """), {"user_id": user_id})
            dept_row = result.fetchone()

            if not dept_row or not dept_row.dept_id:
                st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                st.stop()

            dept_id = str(dept_row.dept_id)
            dept_point = dept_row.point_dpmt or 0
            st.markdown(f"üí∞ Point ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏Ñ‡∏∏‡∏ì: **{dept_point:,}**")

            # üéØ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡∏°
            result = conn.execute(text("""
                SELECT id, reward_name, reward_point
                FROM kpigoalpoint.reward
                WHERE reward_type = 'team'
                ORDER BY reward_point, reward_name
            """))
            rewards = result.fetchall()

            if not rewards:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°")
            else:
                reward_dict = {
                    f"{row.reward_name} ({row.reward_point} pts)": (row.id, row.reward_point)
                    for row in rewards
                }

                selected_label = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å", list(reward_dict.keys()))
                selected_reward_id, selected_reward_point = reward_dict[selected_label]

                st.markdown(f"üéØ Point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: **{selected_reward_point:,}**")

                if dept_point < selected_reward_point:
                    st.warning("‚ö†Ô∏è Point ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ")
                else:
                    if st.button("üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°"):
                        try:
                            # ‚úÖ ‡∏´‡∏±‡∏Å point ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
                            result = conn.execute(text("""
                                UPDATE kpigoalpoint.departments
                                SET point_dpmt = point_dpmt - :used_point
                                WHERE id = :dept_id AND point_dpmt >= :used_point
                            """), {
                                "used_point": selected_reward_point,
                                "dept_id": dept_id
                            })

                            if result.rowcount == 0:
                                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏±‡∏Å point ‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                                st.stop()

                            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
                            conn.execute(text("""
                                INSERT INTO kpigoalpoint.req_user_team (
                                    requester_type,
                                    requester_ref_id,
                                    reward_id
                                ) VALUES (
                                    'team',
                                    :dept_id,
                                    :reward_id
                                )
                            """), {
                                "dept_id": dept_id,
                                "reward_id": selected_reward_id
                            })

                            conn.commit()
                            st.success("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()

                        except Exception as e:
                            conn.rollback()
                            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠: {e}")

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        finally:
            if 'conn' in locals():
                conn.close()

                
    elif selected_dept == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô point":
        st.title("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å Point")
        st.write("------")

        user_id = st.session_state.get("user_id")
        if not user_id:
            st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà")
            st.stop()

        try:
            conn = get_connection_app()

            # ‚úÖ ‡∏î‡∏∂‡∏á dept_id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            result = conn.execute(text("""
                SELECT dept_id
                FROM kpigoalpoint.users
                WHERE user_id = :user_id
            """), {"user_id": user_id})
            dept_row = result.fetchone()
            if not dept_row or not dept_row.dept_id:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
                st.stop()

            dept_id = str(dept_row.dept_id)

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
            result = conn.execute(text("""
                SELECT r.id, rw.reward_name, rw.reward_point, r.status, r.upload_time
                FROM kpigoalpoint.req_user_team r
                LEFT JOIN kpigoalpoint.reward rw ON r.reward_id = rw.id
                WHERE r.requester_type = 'user' AND r.requester_ref_id = :user_id
                ORDER BY r.upload_time DESC
            """), {"user_id": user_id})
            personal_history = result.fetchall()

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡∏°
            result = conn.execute(text("""
                SELECT r.id, rw.reward_name, rw.reward_point, r.status, r.upload_time
                FROM kpigoalpoint.req_user_team r
                LEFT JOIN kpigoalpoint.reward rw ON r.reward_id = rw.id
                WHERE r.requester_type = 'team' AND r.requester_ref_id = :dept_id
                ORDER BY r.upload_time DESC
            """), {"dept_id": dept_id})
            team_history = result.fetchall()

            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            st.subheader("üôã‚Äç‚ôÇÔ∏è ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
            if not personal_history:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
            else:
                st.table([{
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠": row.id,
                    "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•": row.reward_name or "-",
                    "‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ": row.reward_point or "-",
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": row.status,
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠": row.upload_time.strftime("%Y-%m-%d %H:%M")
                } for row in personal_history])

            st.subheader("ü§ù ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡∏°")
            if not team_history:
                st.info("üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°")
            else:
                st.table([{
                    "‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠": row.id,
                    "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•": row.reward_name or "-",
                    "‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ": row.reward_point or "-",
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": row.status,
                    "‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠": row.upload_time.strftime("%Y-%m-%d %H:%M")
                } for row in team_history])

        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: {e}")
        finally:
            if 'conn' in locals():
                conn.close()