import streamlit as st
import streamlit_shadcn_ui as ui
import pandas as pd
from db import get_connection_app

def user_page2():
   action = ["‡πÇ‡∏≠‡∏ô Point", "‡πÅ‡∏•‡∏Å Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‡πÅ‡∏•‡∏Å Point ‡∏ó‡∏µ‡∏°"]
   st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
   selected_dept = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)
   
   if selected_dept == "‡πÇ‡∏≠‡∏ô Point":
      st.title("üîÑ ‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô")

      user_id = st.session_state.user_id

      try:
         conn = get_connection_app()
         cur = conn.cursor()

         # ‡∏î‡∏∂‡∏á point ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
         cur.execute("""
               SELECT point_value FROM kpigoalpoint.personal_points
               WHERE user_ref_id = %s
         """, (user_id,))
         row = cur.fetchone()
         current_point = row[0] if row else 0

         # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
         user_df = pd.read_sql("""
               SELECT user_id, full_name, nickname
               FROM kpigoalpoint.users
               WHERE user_id != %s
               ORDER BY full_name
         """, conn, params=(user_id,))

         user_map = {
               f"{row['full_name']} ({row['nickname']})": row['user_id']
               for _, row in user_df.iterrows()
         }

         # dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ
         recipient_display = st.selectbox("üë• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö Point", list(user_map.keys()))
         recipient_user_id = user_map[recipient_display]

         # ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
         point_input = st.number_input("üì§ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Point ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô", min_value=1, step=1)
         col_preview1, col_preview2 = st.columns(2)
            
         with col_preview1:
               ui.metric_card(title="Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", content=int(current_point), description="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", key="card1")
         with col_preview2:
               ui.metric_card(title="Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏≠‡∏ô", content=int(max(0, current_point - point_input)), description="‡∏´‡∏≤‡∏Å‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", key="card2")

         if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô"):
               if point_input > current_point:
                  st.warning("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ Point ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
               else:
                  try:
                     # ‡∏´‡∏±‡∏Å point ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                     cur.execute("""
                           UPDATE kpigoalpoint.personal_points
                           SET point_value = point_value - %s
                           WHERE user_ref_id = %s
                     """, (point_input, user_id))

                     # ‡πÄ‡∏û‡∏¥‡πà‡∏° point ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
                     cur.execute("""
                           UPDATE kpigoalpoint.personal_points
                           SET point_value = point_value + %s
                           WHERE user_ref_id = %s
                     """, (point_input, recipient_user_id))

                     conn.commit()
                     st.success(f"‚úÖ ‡πÇ‡∏≠‡∏ô {point_input} Point ‡πÉ‡∏´‡πâ {recipient_display} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                     st.rerun()

                  except Exception as e:
                     conn.rollback()
                     st.error(f"‚ùå ‡πÇ‡∏≠‡∏ô Point ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

      except Exception as e:
         st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

