import streamlit as st
import streamlit_shadcn_ui as ui
import os
import pandas as pd

from datetime import datetime
from sqlalchemy import create_engine, text
from db import get_connection_app


def user_page3():

   user_id = st.session_state.user_id

   action = ["‡∏Ç‡∏≠ Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", "‡∏Ç‡∏≠ Point ‡∏ó‡∏µ‡∏°", "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£ Point"]
   st.sidebar.header("üîé ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
   select_option = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£", action)

   if select_option == "‡∏Ç‡∏≠ Point ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß":
      st.title("üìé ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö/‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

      conn_kpi = get_connection_app()
      kpi_query = text("""
         SELECT id, kpi_name
         FROM kpigoalpoint.kpi_personal
         WHERE user_ref_id = :user_id
      """)
      kpi_result = conn_kpi.execute(kpi_query, {"user_id": str(user_id)})
      kpi_list = kpi_result.fetchall()
      conn_kpi.close()

      if not kpi_list:
         st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠")
         selected_kpi_id = None
      else:
         kpi_dict = {f"{row.kpi_name} (ID: {row.id})": row.id for row in kpi_list}
         selected_kpi_name = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", list(kpi_dict.keys()))
         selected_kpi_id = kpi_dict[selected_kpi_name]
         
         st.write('------')

         with st.form("upload_form", clear_on_submit=True):
            uploaded_file = st.file_uploader("üìÅ ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå", type=["pdf", "jpg", "jpeg", "png", "docx", "xlsx", "csv"])
            message = st.text_area("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•...")
            status = "onprocess"
            submitted = st.form_submit_button("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

         if submitted:
            if not uploaded_file and not message:
                  st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á")
                  st.stop()

            try:
                  now = datetime.now()
                  year = str(now.year)
                  month = str(now.month).zfill(2)

                  if uploaded_file:
                     original_name = uploaded_file.name
                     file_type = uploaded_file.type
                     relative_path = f"uploads/personal/examine/{year}/{month}"
                  else:
                     original_name = None
                     file_type = None
                     relative_path = None

                  conn = get_connection_app()
                  with conn.begin():
                     result = conn.execute(text("""
                        INSERT INTO kpigoalpoint.file_messages_personal (
                              user_ref_id, original_name, file_type, path, message, status, kpi_id
                        ) VALUES (
                              :user_ref_id, :original_name, :file_type, :path, :message, :status, :kpi_id
                        ) RETURNING id
                     """), {
                        "user_ref_id": str(user_id),
                        "original_name": original_name,
                        "file_type": file_type,
                        "path": relative_path,
                        "message": message,
                        "status": status,
                        "kpi_id": selected_kpi_id
                     })

                     inserted_id = result.scalar()
                     new_name = str(inserted_id)

                     if uploaded_file:
                        save_dir = os.path.join("uploads", "personal", "examine", year, month)
                        os.makedirs(save_dir, exist_ok=True)

                        file_ext = os.path.splitext(original_name)[-1]
                        full_filename = new_name + file_ext
                        save_path = os.path.join(save_dir, full_filename)

                        with open(save_path, "wb") as f:
                              f.write(uploaded_file.read())

                        conn.execute(text("""
                              UPDATE kpigoalpoint.file_messages_personal
                              SET new_name = :new_name
                              WHERE id = :id
                        """), {
                              "new_name": full_filename,
                              "id": inserted_id
                        })

                  conn.close()

                  if uploaded_file:
                     st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {original_name} ‚Üí ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                  if message:
                     st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                  st.success("üì¨ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            except Exception as e:
                  st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")


   elif select_option == "‡∏Ç‡∏≠ Point ‡∏ó‡∏µ‡∏°":
      st.title("üìé ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö/‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (‡∏ó‡∏µ‡∏°)")

      conn = get_connection_app()
      dept_query = text("""
         SELECT dept_id FROM kpigoalpoint.users WHERE user_id = :user_id
      """)
      dept_result = conn.execute(dept_query, {"user_id": str(user_id)}).fetchone()
      conn.close()

      if not dept_result:
         st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
         st.stop()

      dept_ref_id = dept_result.dept_id

      conn_kpi = get_connection_app()
      kpi_query = text("""
         SELECT id, kpi_name
         FROM kpigoalpoint.kpi_team
         WHERE dept_ref_id = :dept_ref_id
      """)
      kpi_result = conn_kpi.execute(kpi_query, {"dept_ref_id": str(dept_ref_id)})
      kpi_list = kpi_result.fetchall()
      conn_kpi.close()

      if not kpi_list:
         st.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ KPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° KPI ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠")
         selected_kpi_id = None
      else:
         kpi_dict = {f"{row.kpi_name} (ID: {row.id})": row.id for row in kpi_list}
         selected_kpi_name = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å KPI ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", list(kpi_dict.keys()))
         selected_kpi_id = kpi_dict[selected_kpi_name]

         st.write('------')

         with st.form("upload_form_team", clear_on_submit=True):
            uploaded_file = st.file_uploader("üìÅ ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå", type=["pdf", "jpg", "jpeg", "png", "docx", "xlsx", "csv"])
            message = st.text_area("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•...")
            status = "onprocess"
            submitted = st.form_submit_button("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

         if submitted:
            if not uploaded_file and not message:
                  st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á")
                  st.stop()

            try:
                  now = datetime.now()
                  year = str(now.year)
                  month = str(now.month).zfill(2)

                  if uploaded_file:
                     original_name = uploaded_file.name
                     file_type = uploaded_file.type
                     relative_path = f"uploads/team/examine/{year}/{month}"
                  else:
                     original_name = None
                     file_type = None
                     relative_path = None

                  conn = get_connection_app()
                  with conn.begin():
                     result = conn.execute(text("""
                        INSERT INTO kpigoalpoint.file_messages_team (
                              dept_ref_id, original_name, file_type, path, message, status, kpi_id
                        ) VALUES (
                              :dept_ref_id, :original_name, :file_type, :path, :message, :status, :kpi_id
                        ) RETURNING id
                     """), {
                        "dept_ref_id": str(dept_ref_id),
                        "original_name": original_name,
                        "file_type": file_type,
                        "path": relative_path,
                        "message": message,
                        "status": status,
                        "kpi_id": selected_kpi_id
                     })

                     inserted_id = result.scalar()
                     new_name = str(inserted_id)

                     if uploaded_file:
                        save_dir = os.path.join("uploads", "team", "examine", year, month)
                        os.makedirs(save_dir, exist_ok=True)

                        file_ext = os.path.splitext(original_name)[-1]
                        full_filename = new_name + file_ext
                        save_path = os.path.join(save_dir, full_filename)

                        with open(save_path, "wb") as f:
                              f.write(uploaded_file.read())

                        conn.execute(text("""
                              UPDATE kpigoalpoint.file_messages_team
                              SET new_name = :new_name
                              WHERE id = :id
                        """), {
                              "new_name": full_filename,
                              "id": inserted_id
                        })

                  conn.close()

                  if uploaded_file:
                     st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {original_name} ‚Üí ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                  if message:
                     st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                  st.success("üì¨ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

            except Exception as e:
                  st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")


   elif select_option == "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£ Point":
      st.title("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ Point")

      try:
         conn = get_connection_app()
         query = text("""
               SELECT 
                  fm.original_name, 
                  fm.message, 
                  fm.upload_time, 
                  fm.status,
                  kp.kpi_name
               FROM kpigoalpoint.file_messages_personal fm
               LEFT JOIN kpigoalpoint.kpi_personal kp ON fm.kpi_id = kp.id
               WHERE fm.user_ref_id = :user_id
               ORDER BY fm.upload_time DESC
         """)
         result = conn.execute(query, {"user_id": str(user_id)})
         df = pd.DataFrame(result.fetchall(), columns=["‡πÑ‡∏ü‡∏•‡πå", "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "KPI ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠"])

         if df.empty:
               st.info("üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì")
         else:
               st.dataframe(df, use_container_width=True)

         conn.close()

      except Exception as e:
         st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
