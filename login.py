# login.py
import streamlit as st
import bcrypt
from db import get_connection_readonly
from sqlalchemy import text
import time

def login_page():
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        st.title("üîê Login Page")
        with st.form("login_form"):
            User_ID = st.text_input("User ID")
            password = st.text_input("Password", type="password")
            submit = st.form_submit_button("Login")

        if submit:
            try:
                conn = get_connection_readonly()  # ‚Üê SQLAlchemy Connection

                # üîê ‡∏î‡∏∂‡∏á hashed_password ‡∏à‡∏≤‡∏Å auth_credentials
                result = conn.execute(
                    text("""
                        SELECT hashed_password 
                        FROM kpigoalpoint.auth_credentials 
                        WHERE user_id = :user_id
                    """),
                    {"user_id": User_ID}
                )
                row = result.mappings().fetchone()  # ‡πÉ‡∏ä‡πâ mappings() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ access ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ column ‡πÑ‡∏î‡πâ

                if row and bcrypt.checkpw(password.encode(), row["hashed_password"].encode()):
                    # ‚úÖ ‡∏î‡∏∂‡∏á role ‡∏à‡∏≤‡∏Å table users
                    result = conn.execute(
                        text("""
                            SELECT role_onweb 
                            FROM kpigoalpoint.users 
                            WHERE user_id = :user_id
                        """),
                        {"user_id": User_ID}
                    )
                    role_row = result.mappings().fetchone()

                    if role_row:
                        role = role_row["role_onweb"]
                        st.session_state.authenticated = True
                        st.session_state.user_id = User_ID
                        st.session_state.user_role = role
                        st.success("‚úÖ Login success, redirecting...")
                        time.sleep(1)
                        st.query_params.update({"page": role})
                        st.rerun()
                    else:
                        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table users")
                else:
                    st.error("‚ùå User ID ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

            except Exception as e:
                st.error(f"‚ùå Database error: {e}")
    else:
        st.success("‚úÖ Already logged in.")
        time.sleep(0.5)
        st.query_params.update({"page": st.session_state.get("user_role", "user")})
        st.rerun()

if __name__ == "__main__":
    login_page()
